CSS 指层叠样式表 (Cascading Style Sheets)
样式定义如何显示 HTML 元素
样式通常存储在样式表中
把样式添加到 HTML 4.0 中，是为了解决内容与表现分离的问题
外部样式表可以极大提高工作效率
外部样式表通常存储在 CSS 文件中
多个样式定义可层叠为一

外部样式表：
<head>
<link rel="stylesheet" type="text/css" href="mystyle.css" />
</head>
内部样式表：
<head>
<style type="text/css">
  hr {color: sienna;}
  p {margin-left: 20px;}
  body {background-image: url("images/back40.gif");}
</style>
</head>
内部样式：
<p style="color: sienna; margin-left: 20px">
This is a paragraph
</p>



派生选择器通过依据元素在其位置的上下文关系来定义样式：
    比方说，你希望列表中的 strong 元素变为斜体字，而不是通常的粗体字，可以这样定义一个派生选择器：
    li strong {
        font-style: italic;
        font-weight: normal;
    }
    请注意标记为 <strong> 的蓝色代码的上下文关系：
    <p><strong>我是粗体字，不是斜体字，因为我不在列表当中，所以这个规则对我不起作用</strong></p>
    <ol>
    <li><strong>我是斜体字。这是因为 strong 元素位于 li 元素内。</strong></li>
    <li>我是正常的字体。</li>
    </ol>
id 选择器以 "#" 来定义。
    下面的两个 id 选择器，第一个可以定义元素的颜色为红色，第二个定义元素的颜色为绿色：
    #red {color:red;}
    #green {color:green;}
    下面的 HTML 代码中，id 属性为 red 的 p 元素显示为红色，而 id 属性为 green 的 p 元素显示为绿色。
    <p id="red">这个段落是红色。</p>
    <p id="green">这个段落是绿色。</p>
在 CSS 中，类选择器以一个点号显示。
    .center {text-align: center}
    在上面的例子中，所有拥有 center 类的 HTML 元素均为居中。
    在下面的 HTML 代码中，h1 和 p 元素都有 center 类。这意味着两者都将遵守 ".center" 选择器中的规则。
    <h1 class="center">
    This heading will be center-aligned
    </h1>
CSS 属性选择器 对带有指定属性的 HTML 元素设置样式。
    

CSS 框模型 (Box Model)：
处理元素内容(element)、内边距(padding)、边框(border) 和 外边距(margin)
padding和margin只有距属性
border有宽度、样式，以及颜色属性

外边距合并指的是，当两个垂直外边距相遇时，它们将形成一个外边距。
合并后的外边距的高度等于两个发生合并的外边距的高度中的较大者。


CSS 定位机制
CSS 有三种基本的定位机制：普通流、浮动和绝对定位。
除非专门指定，否则所有框都在普通流中定位。

CSS position 属性
通过使用 position 属性，我们可以选择 4 种不同类型的定位，这会影响元素框生成的方式。
position 属性值的含义：
static：
元素框正常生成。块级元素生成一个矩形框，作为文档流的一部分，行内元素则会创建一个或多个行框，置于其父元素中。
relative：
元素框偏移某个距离。元素仍保持其未定位前的形状，它原本所占的空间仍保留。
absolute：
元素框从文档流完全删除，并相对于其包含块定位。包含块可能是文档中的另一个元素或者是初始包含块。元素原先在正常文档流中所占的空间会关闭，就好像元素原来不存在一样。元素定位后生成一个块级框，而不论原来它在正常流中生成何种类型的框。
fixed：
元素框的表现类似于将 position 设置为 absolute，不过其包含块是视窗本身。
提示：相对定位实际上被看作普通流定位模型的一部分，因为元素的位置相对于它在普通流中的位置。

select:last-child: 选择父元素的最后一个子元素，且同时满足select条件的。两者缺一不可

!DICTYPE



2D 转换方法：
translate()
    通过 translate() 方法，元素从其当前位置移动，根据给定的 left（x 坐标） 和 top（y 坐标） 位置参数
rotate()
    通过 rotate() 方法，元素顺时针旋转给定的角度。允许负值，元素将逆时针旋转。
scale()
    通过 scale() 方法，元素的尺寸会增加或减少，根据给定的宽度（X 轴）和高度（Y 轴）参数
skew()
    通过 skew() 方法，元素翻转给定的角度，根据给定的水平线（X 轴）和垂直线（Y 轴）参数
matrix()
    matrix() 方法把所有 2D 转换方法组合在一起。
    matrix() 方法需要六个参数，包含数学函数，允许您：旋转、缩放、移动以及倾斜元素。













